datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model VoteImport {
  id            Int @id @default(autoincrement())
  rawData       String
  importErrors  String
  processed     Boolean
  
  category      String
  chamber       String
  congress      Int
  date          DateTime
  number        Int
  question      String
  requires      String
  result        String
  resultText   String
  session       String
  source_url    String
  type          String
  updated_at    DateTime
  vote_id       String @unique

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Vote {
  id              Int @id @default(autoincrement())
  category        CategoryType @relation(fields: [categoryId], references: [id])
  categoryId      Int
  chamber         Chamber @relation(fields: [chamberId], references: [id])
  chamberId       Int
  congressionalSession      CongressionalSession @relation(fields: [congressionalSessionId], references: [id])
  congressionalSessionId      Int
  requiresType    RequiresType @relation(fields: [requiresTypeId], references: [id])
  requiresTypeId  Int
  resultType    ResultType @relation(fields: [resultTypeId], references: [id]) 
  resultTypeId  Int
  voteType        VoteType @relation(fields: [voteTypeId], references: [id])
  voteTypeId    Int 
  session       String
  sourceUrl    String
  congressional_updated_at  DateTime // Maps to updated_at
  congressional_vote_id       String @unique

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  ballots    Ballot[] 
}

model Ballot {
  id              Int @id @default(autoincrement())
  reviewed        Boolean
  
  vote         Vote @relation(fields: [voteId], references: [id])
  voteId        Int
  
  ballotChoiceType  BallotChoiceType @relation(fields: [ballotChoiceTypeId], references: [id])
  ballotChoiceTypeId  Int

  legislatorId   Int
  legislator  Legislator @relation(fields: [legislatorId], references: [id])

  @@unique([voteId, legislatorId])
}

model BallotChoiceType {
  id            Int @id @default(autoincrement())
  name          String
  slug          String @unique
  reviewed      Boolean
  
  ballots        Ballot[]
}

model CategoryType {
  id            Int @id @default(autoincrement())
  name          String
  slug          String @unique
  reviewed     Boolean

  votes         Vote[]
}

model Chamber {
  id            Int @id @default(autoincrement())
  name          String
  slug          String @unique
  reviewed     Boolean

  votes         Vote[]
}

model CongressionalSession {
  id            Int @id @default(autoincrement())
  name          String
  slug          String @unique
  reviewed     Boolean
  
  votes         Vote[]
}

model Legislator {
  id            Int @id @default(autoincrement())
  bioguideid    String @unique
  displayName  String
  reviewed      Boolean
  firstName    String?
  lastName     String?
  
  party       Party @relation(fields: [partyId], references: [id])
  partyId     Int
  
  // TODO This will eventually need to be refactored to allow for legislators changing parties.
  state       State @relation(fields: [stateId], references: [id])
  stateId      Int

  ballots     Ballot[]
}

model RequiresType {
  id            Int @id @default(autoincrement())
  name          String
  slug          String @unique
  reviewed     Boolean
  
  votes         Vote[]
}

model ResultType {
  id            Int @id @default(autoincrement())
  name          String
  slug          String @unique
  reviewed      Boolean
  
  votes         Vote[]
}

model Party {
  id            Int @id @default(autoincrement())
  name          String
  slug          String @unique
  reviewed      Boolean

  legislators   Legislator[]
}

model State {
  id            Int @id @default(autoincrement())
  name          String
  shortName    String @unique
  reviewed      Boolean

  legislators   Legislator[]
}

model VoteType {
  id            Int @id @default(autoincrement())
  name          String
  slug          String @unique
  reviewed      Boolean
  
  votes         Vote[]
}
